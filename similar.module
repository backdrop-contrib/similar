<?php
/**
 * @file
 * Module that shows a block listing similar entries.
 * NOTE: Uses MySQL's FULLTEXT indexing for MyISAM tables.
 */

/**
 * Implementation of hook_help().
 *
 * @param string $section
 */
function similar_help($section = 'admin/help#similar') {
  switch ($section) {
    case 'admin/help#similar':
      return t('<p>Lists 10 most similar nodes to the current node.</p>');
    case 'admin/modules#description':
      return t('Lists 10 most similar nodes to the current node.');
    case 'node/add#similar':
      return t('Lists 10 most similar nodes to the current node.');
      break;
  }
}

/**
 * Implementation of hook_block().
 *
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 *
 * @param string $op
 * @param integer $delta
 * @param array $edit
 */
function similar_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $blocks[0]['info'] = t('Similar entries');
      return $blocks;

    case 'configure':
      $form = array();
      if ($delta == 0) {
        for($i=1, $options=array(); $i < 26; $options[$i] = $i, $i+=1);
        $form['similar_num_display'] = array(
          '#type' => 'select',
          '#title' => t('Number of similar entries to find'),
          '#default_value' => variable_get('similar_num_display', 5),
          '#options' => $options
        );

/**
 http://drupal.org/node/33444
        $types = _similar_published_node_types();
        $form['similar_node_types'] = array(
          '#type' => 'select',
          '#multiple' => true,
          '#title' => t('Node types to display'),
          '#default_value' => variable_get('similar_node_types', $types),
          '#options' => $types
        );
**/
      }
      return $form;

    case 'save':
      if ($delta == 0) {
        variable_set('similar_num_display', $edit['similar_num_display']);
      }
      return;

    case 'view':
    default:
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(array('nid' => arg(1)));
      } else {
        return;
      }

      if ($node->nid > 0) {
        switch ($delta) {
          case 0:
            // The subject is displayed at the top of the block. Note that it should
            // be passed through t() for translation.
            $block['subject'] = t('Similar entries');
            // The content of the block is typically generated by calling a custom
            // function.
            $block['content'] = _similar_content($node);
        }
      }
      return $block;
      break;
  }
}

/**
 * Query for published node types
 *
 * @see http://drupal.org/node/33444
 * @return array
 */
function _similar_published_node_types() {
  $types  = array();
  $result = db_query('SELECT DISTINCT(n.type) FROM {node} n WHERE n.status <> 0 ORDER BY n.type ASC');
  while($type = db_fetch_object($result)) {
    $types[$type->type] = $type->type;
  }
  return $types;
}

/**
 * Queries the database for similar entries and puts them in a HTML list
 *
 * @param object $node
 * @return string
 */
function _similar_content($node) {
  $text       = $node->title . ' ' . $node->body;
/**
 http://drupal.org/node/33444
  $node_types = variable_get('similar_node_types', _similar_published_node_types());
  $node_types = empty($node_types) ? '' : sprintf("AND n.type IN('%s') ", implode("','", $node_types));
  $result     = db_query_range('SELECT r.nid, r.title, match(r.body, r.title) AGAINST ("%s") AS score FROM {node_revisions} r, {node} n WHERE r.nid = n.nid AND MATCH(r.body, r.title) AGAINST ("%s") '. $node_types .'AND n.status <> 0 AND r.nid <> %d ORDER BY score DESC', $text, $text, $node->nid, 0, variable_get('similar_num_display', 5));
**/
  $result     = db_query_range('SELECT r.nid, r.title, match(r.body, r.title) AGAINST ("%s") AS score FROM {node_revisions} r, {node} n WHERE r.nid = n.nid AND MATCH(r.body, r.title) AGAINST ("%s") AND n.status <> 0 AND r.nid <> %d ORDER BY score DESC', $text, $text, $node->nid, 0, variable_get('similar_num_display', 5));
  while ($node = db_fetch_object($result)) {
      $items[] = l($node->title, 'node/'.$node->nid);
  }

  $output = theme('item_list', $items);

  return $output;
}

?>